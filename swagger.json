{
  "openapi": "3.0.2",
  "info": {
    "title": "DiligentlyAI API",
    "version": "1.0"
  },
  "servers": [
    {
      "url": "https://v64kqp7gpz4bij5oq3iy7a3ph40dphzp.lambda-url.us-east-1.on.aws/ "
    }
  ],
  "paths": {
    "/admin_user": {
      "post": {
        "description": "creates a new admin user and creates their organization - called from auth0",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "email": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    }
                  }
                }
              }
            },
            "description": "OK"
          }
        }
      }
    },
    "/self": {
      "get": {
        "description": "gets one's own details",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string"
                    },
                    "email": {
                      "type": "string"
                    },
                    "is_admin": {
                      "type": "boolean"
                    }
                  }
                }
              }
            },
            "description": "OK"
          }
        }
      },
      "put": {
        "description": "updates ones own account. Only need to send the fields that should be updated.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "email": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    }
                  }
                }
              }
            },
            "description": "OK"
          }
        }
      }
    },
    "/org": {
      "get": {
        "description": "gets org details",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string"
                    },
                    "plan_id": {
                      "type": "string"
                    },
                    "subscription_id": {
                      "type": "string"
                    },
                    "created_date": {
                      "type": "string"
                    },
                    "renewal_date": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "description": "OK"
          }
        }
      },
      "put": {
        "description": "updates a org. Can only change the name. - admin only",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    }
                  }
                }
              }
            },
            "description": "OK"
          }
        }
      }
    },
    "/users": {
      "get": {
        "description": "gets all users in org - admin only",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string"
                      },
                      "email": {
                        "type": "string"
                      },
                      "user_id": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            },
            "description": "OK"
          }
        }
      }
    },
    "/user": {
      "post": {
        "description": "creates a new user, adds them to org as well - admin only",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "email": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    }
                  }
                }
              }
            },
            "description": "OK"
          }
        }
      },
      "put": {
        "description": "updates a user. The user_id is required. Only need to send the fields that should be updated. - admin only",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "email": {
                    "type": "string"
                  },
                  "user_id": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    }
                  }
                }
              }
            },
            "description": "OK"
          }
        }
      },
      "delete": {
        "description": "deletes a user - admin only",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "user_id"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    }
                  }
                }
              }
            },
            "description": "OK"
          }
        }
      }
    },
    "/llm_connections": {
      "get": {
        "description": "gets org's LLM connections",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "connection_id": {
                        "type": "string"
                      },
                      "provider": {
                        "type": "string",
                        "example": "open-ai"
                      },
                      "model_ids": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "example": ["gpt-4", "gpt-3.5"]
                      },
                      "date_created": {
                        "type": "string"
                      },
                      "nickname": {
                        "type": "string"
                      },
                      "credential_previews": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            },
            "description": "OK"
          }
        }
      }
    },
    "/llm_connection": {
      "post": {
        "description": "add a new LLM connection",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "nickname": {
                    "type": "string"
                  },
                  "provider": {
                    "type": "string"
                  },
                  "credentials": {
                    "type": "object"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    }
                  }
                }
              }
            },
            "description": "OK"
          }
        }
      },
      "put": {
        "description": "updates a connection. The connection_id is required. Only need to send the fields that should be updated.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "connection_id": {
                    "type": "string"
                  },
                  "nickname": {
                    "type": "string"
                  },
                  "credentials": {
                    "type": "object"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    }
                  }
                }
              }
            },
            "description": "OK"
          }
        }
      },
      "delete": {
        "description": "remove a connection",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "connection_id"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    }
                  }
                }
              }
            },
            "description": "OK"
          }
        }
      }
    },
    "/prompts": {
      "get": {
        "description": "get playground / dev prompts",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "env",
            "example": "playground | dev"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "prompt_id": {
                        "type": "string"
                      },
                      "prompt": {
                        "type": "string"
                      },
                      "name": {
                        "type": "string"
                      },
                      "date_created": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            },
            "description": "OK"
          }
        }
      }
    },
    "/prompt": {
      "get": {
        "description": "get playground / dev prompt by id",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "env",
            "example": "playground | dev"
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "prompt_id"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "prompt_id": {
                      "type": "string"
                    },
                    "prompt": {
                      "type": "string"
                    },
                    "name": {
                      "type": "string"
                    },
                    "date_created": {
                      "type": "string"
                    },
                    "test_cases": {
                      "type": "object"
                    },
                    "model_ids": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            },
            "description": "OK"
          }
        }
      },
      "post": {
        "description": "make new playground/dev prompt. test cases and model_ids are optional (assumed empty)",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "env": {
                    "type": "string",
                    "example": "playground | dev"
                  },
                  "prompt": {
                    "type": "string"
                  },
                  "name": {
                    "type": "string"
                  },
                  "test_cases": {
                    "type": "object"
                  },
                  "model_ids": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "prompt_id": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "description": "OK"
          }
        }
      },
      "put": {
        "description": "update playground/dev prompt. The prompt_id and env are required. Only need to send the fields that should be updated.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "env": {
                    "type": "string",
                    "example": "playground | dev"
                  },
                  "prompt": {
                    "type": "string"
                  },
                  "prompt_id": {
                    "type": "string"
                  },
                  "name": {
                    "type": "string"
                  },
                  "test_cases": {
                    "type": "object"
                  },
                  "model_ids": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    }
                  }
                }
              }
            },
            "description": "OK"
          }
        }
      },
      "delete": {
        "description": "delete playground/dev prompt",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "env",
            "example": "playground | dev"
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "prompt_id"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    }
                  }
                }
              }
            },
            "description": "OK"
          }
        }
      }
    },
    "/execute_prompt_test": {
      "post": {
        "description": "run playground/dev prompt test",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "prompt_id": {
                    "type": "string"
                  },
                  "env": {
                    "type": "string",
                    "example": "playground | dev"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "exec_ids": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            },
            "description": "OK"
          }
        }
      }
    },
    "/promote_to_dev": {
      "put": {
        "description": "deploy prompt to dev from playground",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "prompt_id": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    }
                  }
                }
              }
            },
            "description": "OK"
          }
        }
      }
    },
    "/promote_to_qa": {
      "put": {
        "description": "deploy prompt to qa from dev. the prompt_id and model_id are required as adjustment_threshold and eval_frequency can default to 0",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "prompt_id": {
                    "type": "string"
                  },
                  "model_id": {
                    "type": "string"
                  },
                  "adjustment_threshold": {
                    "type": "number"
                  },
                  "eval_frequency": {
                    "type": "number"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "url": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "description": "OK"
          }
        }
      }
    },
    "/promote_to_prod": {
      "put": {
        "description": "deploy prompt to prod. only the prompt_id is required. alert_threshold can default to 0 and the rest can be pulled from QA",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "prompt_id": {
                    "type": "string"
                  },
                  "adjustment_threshold": {
                    "type": "number"
                  },
                  "alert_threshold": {
                    "type": "number"
                  },
                  "eval_frequency": {
                    "type": "number"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "url": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "description": "OK"
          }
        }
      }
    },
    "/deployments": {
      "get": {
        "description": "get qa or prod deployments",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "env",
            "example": "qa | prod"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "prompt_id": {
                        "type": "string"
                      },
                      "prompt": {
                        "type": "string"
                      },
                      "model_id": {
                        "type": "string"
                      },
                      "adjustment_threshold": {
                        "type": "number"
                      },
                      "eval_frequency": {
                        "type": "number"
                      },
                      "alert_threshold": {
                        "type": "number"
                      },
                      "date_created": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            },
            "description": "OK"
          }
        }
      }
    },
    "/deployment": {
      "get": {
        "description": "get qa or prod deployment",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "env",
            "example": "qa | prod"
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "prompt_id"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "prompt_id": {
                      "type": "string"
                    },
                    "prompt": {
                      "type": "string"
                    },
                    "model_id": {
                      "type": "string"
                    },
                    "adjustment_threshold": {
                      "type": "number"
                    },
                    "eval_frequency": {
                      "type": "number"
                    },
                    "alert_threshold": {
                      "type": "number"
                    },
                    "date_created": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "description": "OK"
          }
        }
      },
      "put": {
        "description": "updates a deployed prompt. The prompt_id and env required. Only need to send the fields that should be updated.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "prompt_id": {
                    "type": "string"
                  },
                  "env": {
                    "type": "string",
                    "example": "qa | prod"
                  },
                  "prompt": {
                    "type": "string"
                  },
                  "model_id": {
                    "type": "string"
                  },
                  "adjustment_threshold": {
                    "type": "number"
                  },
                  "eval_frequency": {
                    "type": "number"
                  },
                  "alert_threshold": {
                    "type": "number"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    }
                  }
                }
              }
            },
            "description": "OK"
          }
        }
      },
      "delete": {
        "description": "delete deployed prompt",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "env",
            "example": "qa | prod"
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "prompt_id"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    }
                  }
                }
              }
            },
            "description": "OK"
          }
        }
      }
    },
    "/execute_deployment": {
      "post": {
        "description": "run deployed prompt",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "prompt_id": {
                    "type": "string"
                  },
                  "args": {
                    "type": "object"
                  },
                  "messages": {
                    "type": "array"
                  },
                  "env": {
                    "type": "string",
                    "example": "qa | prod"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "response": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "description": "OK"
          }
        }
      }
    },
    "/evaluations": {
      "get": {
        "description": "get playground/dev/qa/prod evaluations. Non 100% eval_frequency will result in some prompts / responses having null evaluations",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "env",
            "example": "playground | dev | qa | prod"
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "prompt_id"
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "exec_id"
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "search"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "prompt_id": {
                        "type": "string"
                      },
                      "prompt": {
                        "type": "string"
                      },
                      "response": {
                        "type": "string"
                      },
                      "response_eval": {
                        "type": "object",
                        "properties": {
                          "evaluation": {
                            "type": "string"
                          },
                          "score": {
                            "type": "number"
                          },
                          "verification_evaluation": {
                            "type": "string"
                          }
                        }
                      },
                      "prompt_eval": {
                        "type": "object",
                        "properties": {
                          "evaluation": {
                            "type": "string"
                          },
                          "score": {
                            "type": "number"
                          }
                        }
                      },
                      "date_created": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            },
            "description": "OK"
          }
        }
      }
    },
    "/evaluate_prompt": {
      "post": {
        "description": "execute prompt evaluation",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "prompt_id": {
                    "type": "string"
                  },
                  "prompt": {
                    "type": "string",
                    "example": "A full and complete, non-templated, prompt that is up for evaluation."
                  },
                  "messages": {
                    "type": "array",
                    "example": "All prior messages in the conversation. Optional."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "prompt_id": {
                      "type": "string"
                    },
                    "exec_id": {
                      "type": "string"
                    },
                    "prompt_eval": {
                      "type": "object",
                      "properties": {
                        "evaluation": {
                          "type": "string"
                        },
                        "score": {
                          "type": "number"
                        }
                      }
                    },
                    "date_created": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "description": "OK"
          }
        }
      }
    },
    "/evaluate_response": {
      "post": {
        "description": "execute response evaluation",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "prompt_id": {
                    "type": "string"
                  },
                  "exec_id": {
                    "type": "string"
                  },
                  "response": {
                    "type": "string",
                    "example": "A response that came from a different LLM, and is up for evaluation."
                  },
                  "messages": {
                    "type": "array",
                    "example": "All prior messages in the conversation. Optional."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "prompt_id": {
                      "type": "string"
                    },
                    "exec_id": {
                      "type": "string"
                    },
                    "response_eval": {
                      "type": "object",
                      "properties": {
                        "evaluation": {
                          "type": "string"
                        },
                        "score": {
                          "type": "number"
                        }
                      }
                    },
                    "date_created": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "description": "OK"
          }
        }
      }
    },
    "/evaluate_execution": {
      "post": {
        "description": "execute prompt or response evaluation",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "exec_id": {
                    "type": "string"
                  },
                  "message_type": {
                    "type": "string",
                    "example": "prompt | response"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    }
                  }
                }
              }
            },
            "description": "OK"
          }
        }
      }
    }
  }
}
